/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞
 * –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ñ–∞–π–ª—É telegram_test_menu.js
 */

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–î–ò–ê =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–µ–¥–∏–∞
 */
function sendTestMedia(chatId, mediaType, url, caption) {
  try {
    const options = {
      chat_id: chatId
    };
    
    if (caption) {
      options.caption = caption;
      options.parse_mode = "HTML";
    }
    
    switch (mediaType) {
      case 'photo':
        options.photo = url;
        return Bot.sendPhoto(options);
        
      case 'document':
        options.document = url;
        return Bot.sendDocument(options);
        
      case 'video':
        options.video = url;
        return Bot.sendVideo(options);
        
      case 'audio':
        options.audio = url;
        return Bot.sendAudio(options);
        
      case 'voice':
        options.voice = url;
        return Bot.sendVoice(options);
        
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–æ—Ç–æ
 */
function sendRandomPhoto(chatId) {
  const photos = [
    "https://picsum.photos/400/300?random=1",
    "https://picsum.photos/400/300?random=2",
    "https://picsum.photos/400/300?random=3",
    "https://picsum.photos/400/300?random=4",
    "https://picsum.photos/400/300?random=5"
  ];
  
  const randomPhoto = photos[Math.floor(Math.random() * photos.length)];
  
  return Bot.sendPhoto({
    chat_id: chatId,
    photo: randomPhoto,
    caption: "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∏–∑ Picsum"
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∏–∑ Google Sheets
 */
function sendChartFromSheet(chatId) {
  try {
    const sheet = ss.getSheetByName("Data");
    if (sheet && sheet.getCharts().length > 0) {
      const chart = sheet.getCharts()[0];
      const blob = chart.getBlob();
      
      return Bot.sendPhoto({
        chat_id: chatId,
        photo: blob,
        caption: "üìä –ì—Ä–∞—Ñ–∏–∫ –∏–∑ Google –¢–∞–±–ª–∏—Ü",
        contentType: "multipart/form-data"
      });
    } else {
      throw new Error('–ì—Ä–∞—Ñ–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
 */
function sendTableAsDocument(chatId) {
  try {
    const sheet = ss.getSheetByName("Data");
    if (!sheet) {
      throw new Error('–õ–∏—Å—Ç "Data" –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    const data = sheet.getDataRange().getValues();
    let csvContent = "";
    
    data.forEach(row => {
      csvContent += row.map(cell => `"${cell}"`).join(",") + "\n";
    });
    
    const blob = Utilities.newBlob(csvContent, MimeType.CSV, "table_data.csv");
    
    return Bot.sendDocument({
      chat_id: chatId,
      document: blob,
      caption: "üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã",
      contentType: "multipart/form-data"
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', error);
    throw error;
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function sendTestKeyboard(chatId, text, type, buttonsText) {
  try {
    const Keyboard = TGbot.keyboard();
    const Key = TGbot.key();
    
    // –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏
    const buttonRows = buttonsText.split('\n').filter(row => row.trim());
    const keyboardButtons = [];
    
    buttonRows.forEach(row => {
      const parts = row.split('|');
      if (parts.length >= 2) {
        const buttonText = parts[0].trim();
        const callbackData = parts[1].trim();
        
        if (parts.length === 3 && parts[2].startsWith('http')) {
          // URL –∫–Ω–æ–ø–∫–∞
          keyboardButtons.push([Key.url(buttonText, parts[2])]);
        } else {
          // Callback –∫–Ω–æ–ø–∫–∞
          keyboardButtons.push([Key.callback(buttonText, callbackData)]);
        }
      }
    });
    
    let keyboard;
    if (type === 'inline') {
      keyboard = Keyboard.make(keyboardButtons, { columns: 1 }).inline();
    } else {
      keyboard = Keyboard.make(keyboardButtons, { columns: 1 }).reply();
    }
    
    return Bot.sendMessage({
      chat_id: chatId,
      text: text,
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
 */
function sendSimpleKeyboard(chatId, text, buttons) {
  try {
    const Keyboard = TGbot.keyboard();
    
    const keyboard = Keyboard.make(buttons, { columns: 2 }).reply();
    
    return Bot.sendMessage({
      chat_id: chatId,
      text: text,
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å callback
 */
function sendInlineKeyboard(chatId, text, buttons) {
  try {
    const Keyboard = TGbot.keyboard();
    const Key = TGbot.key();
    
    const keyboardButtons = buttons.map(button => {
      if (button.url) {
        return [Key.url(button.text, button.url)];
      } else {
        return [Key.callback(button.text, button.callback)];
      }
    });
    
    const keyboard = Keyboard.make(keyboardButtons, { columns: 1 }).inline();
    
    return Bot.sendMessage({
      chat_id: chatId,
      text: text,
      reply_markup: keyboard
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
    throw error;
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ü–†–û–°–û–í =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞
 */
function sendTestPoll(chatId, question, optionsText, isQuiz, correctOption, explanation) {
  try {
    const options = optionsText.split('\n').filter(opt => opt.trim());
    
    const pollOptions = {
      chat_id: chatId,
      question: question,
      options: options
    };
    
    if (isQuiz) {
      pollOptions.type = "quiz";
      pollOptions.is_anonymous = false;
      
      if (correctOption && correctOption > 0) {
        pollOptions.correct_option_id = parseInt(correctOption) - 1;
      }
      
      if (explanation) {
        pollOptions.explanation = explanation;
      }
    }
    
    return Bot.sendPoll(pollOptions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞
 */
function sendSimplePoll(chatId, question, options) {
  try {
    return Bot.sendPoll({
      chat_id: chatId,
      question: question,
      options: options
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞:', error);
    throw error;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
 */
function sendQuiz(chatId, question, options, correctOption, explanation) {
  try {
    const quizOptions = {
      chat_id: chatId,
      question: question,
      options: options,
      type: "quiz",
      is_anonymous: false
    };
    
    if (correctOption >= 0) {
      quizOptions.correct_option_id = correctOption;
    }
    
    if (explanation) {
      quizOptions.explanation = explanation;
    }
    
    return Bot.sendPoll(quizOptions);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:', error);
    throw error;
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–°–¢–†–û–ï–ö =====

/**
 * –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–æ—Ç–æ–º
 */
function testBotConnection() {
  try {
    const info = Bot.getMe();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', info);
    return info;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
 */
function getBotInfo() {
  try {
    const info = Bot.getMe();
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', info);
    return info;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
    throw error;
  }
}

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
 */
function setupWebhook() {
  try {
    const result = Bot.setWebhook({
      url: WEBAPP_URL,
      max_connections: 50
    });
    console.log('Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error);
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
 */
function checkWebhook() {
  try {
    const info = Bot.getWebhookInfo();
    console.log('Webhook info:', info);
    return info;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook:', error);
    throw error;
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ webhook
 */
function deleteWebhook() {
  try {
    const result = Bot.deleteWebhook();
    console.log('Webhook —É–¥–∞–ª–µ–Ω:', result);
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error);
    throw error;
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function loadStats() {
  try {
    const messagesSheet = ss.getSheetByName("Messages");
    const usersSheet = ss.getSheetByName("Users");
    
    let totalMessages = 0;
    let totalUsers = 0;
    let todayMessages = 0;
    
    if (messagesSheet && messagesSheet.getLastRow() > 1) {
      totalMessages = messagesSheet.getLastRow() - 1;
      
      // –ü–æ–¥—Å—á–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const today = new Date();
      const todayStart = new Date(today.getFullYear(), today.getMonth(), today.getDate());
      
      const dates = messagesSheet.getRange(2, 1, messagesSheet.getLastRow() - 1, 1).getValues();
      todayMessages = dates.filter(date => date[0] >= todayStart).length;
    }
    
    if (usersSheet && usersSheet.getLastRow() > 1) {
      totalUsers = usersSheet.getLastRow() - 1;
    }
    
    const statsHtml = `
      <div style="background: white; padding: 15px; border-radius: 8px; border: 1px solid #e0e0e0;">
        <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</h4>
        <p><strong>–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</strong> ${totalMessages}</p>
        <p><strong>–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è:</strong> ${todayMessages}</p>
        <p><strong>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> ${totalUsers}</p>
        <p><strong>–î–∞—Ç–∞:</strong> ${new Date().toLocaleDateString('ru-RU')}</p>
      </div>
    `;
    
    return statsHtml;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    return '<div style="color: red;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</div>';
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function getDetailedStats() {
  try {
    const messagesSheet = ss.getSheetByName("Messages");
    const usersSheet = ss.getSheetByName("Users");
    
    const stats = {
      totalMessages: 0,
      totalUsers: 0,
      todayMessages: 0,
      thisWeekMessages: 0,
      thisMonthMessages: 0,
      lastActivity: null,
      topUsers: []
    };
    
    if (messagesSheet && messagesSheet.getLastRow() > 1) {
      const data = messagesSheet.getDataRange().getValues();
      const headers = data[0];
      const messages = data.slice(1);
      
      stats.totalMessages = messages.length;
      
      // –ü–æ–¥—Å—á–µ—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
      const now = new Date();
      const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
      const weekStart = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
      const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);
      
      messages.forEach(row => {
        const messageDate = new Date(row[0]);
        
        if (messageDate >= todayStart) {
          stats.todayMessages++;
        }
        if (messageDate >= weekStart) {
          stats.thisWeekMessages++;
        }
        if (messageDate >= monthStart) {
          stats.thisMonthMessages++;
        }
      });
      
      // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      if (messages.length > 0) {
        stats.lastActivity = new Date(messages[messages.length - 1][0]);
      }
      
      // –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const userStats = {};
      messages.forEach(row => {
        const userId = row[1];
        userStats[userId] = (userStats[userId] || 0) + 1;
      });
      
      stats.topUsers = Object.entries(userStats)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5)
        .map(([userId, count]) => ({ userId, count }));
    }
    
    if (usersSheet && usersSheet.getLastRow() > 1) {
      stats.totalUsers = usersSheet.getLastRow() - 1;
    }
    
    return stats;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    throw error;
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê =====

/**
 * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV
 */
function exportDataToCSV() {
  try {
    const messagesSheet = ss.getSheetByName("Messages");
    const usersSheet = ss.getSheetByName("Users");
    
    let csvContent = "–¢–∏–ø,–î–∞—Ç–∞,ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–ò–º—è,–°–æ–æ–±—â–µ–Ω–∏–µ\n";
    
    if (messagesSheet && messagesSheet.getLastRow() > 1) {
      const data = messagesSheet.getDataRange().getValues();
      data.slice(1).forEach(row => {
        csvContent += `–°–æ–æ–±—â–µ–Ω–∏–µ,${row[0]},${row[1]},${row[2]},"${row[3]}"\n`;
      });
    }
    
    csvContent += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n";
    csvContent += "ID,–ò–º—è,–§–∞–º–∏–ª–∏—è,–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n";
    
    if (usersSheet && usersSheet.getLastRow() > 1) {
      const data = usersSheet.getDataRange().getValues();
      data.slice(1).forEach(row => {
        csvContent += `${row[0]},${row[1]},${row[2]},${row[3]}\n`;
      });
    }
    
    return csvContent;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ HTML
 */
function createHtmlReport() {
  try {
    const stats = getDetailedStats();
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>–û—Ç—á–µ—Ç Telegram –±–æ—Ç–∞</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          .header { background: #667eea; color: white; padding: 20px; border-radius: 10px; }
          .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
          .stat-card { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
          .stat-number { font-size: 2em; font-weight: bold; color: #667eea; }
          .stat-label { color: #666; margin-top: 5px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üìä –û—Ç—á–µ—Ç Telegram –±–æ—Ç–∞</h1>
          <p>–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}</p>
        </div>
        
        <div class="stats">
          <div class="stat-card">
            <div class="stat-number">${stats.totalMessages}</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.todayMessages}</div>
            <div class="stat-label">–°–µ–≥–æ–¥–Ω—è</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.totalUsers}</div>
            <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
          </div>
          <div class="stat-card">
            <div class="stat-number">${stats.thisWeekMessages}</div>
            <div class="stat-label">–ó–∞ –Ω–µ–¥–µ–ª—é</div>
          </div>
        </div>
        
        <h3>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
        <ul>
          ${stats.topUsers.map(user => `<li>ID ${user.userId}: ${user.count} —Å–æ–æ–±—â–µ–Ω–∏–π</li>`).join('')}
        </ul>
        
        <p><strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> ${stats.lastActivity ? stats.lastActivity.toLocaleString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}</p>
      </body>
      </html>
    `;
    
    return html;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTML –æ—Ç—á–µ—Ç–∞:', error);
    throw error;
  }
}

// ===== –£–¢–ò–õ–ò–¢–´ =====

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function cleanupOldData(daysToKeep = 30) {
  try {
    const messagesSheet = ss.getSheetByName("Messages");
    const usersSheet = ss.getSheetByName("Users");
    
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    
    let deletedRows = 0;
    
    if (messagesSheet && messagesSheet.getLastRow() > 1) {
      const data = messagesSheet.getDataRange().getValues();
      const headers = data[0];
      const messages = data.slice(1);
      
      const filteredMessages = messages.filter(row => {
        const messageDate = new Date(row[0]);
        return messageDate >= cutoffDate;
      });
      
      const newData = [headers, ...filteredMessages];
      messagesSheet.clear();
      messagesSheet.getRange(1, 1, newData.length, newData[0].length).setValues(newData);
      
      deletedRows = messages.length - filteredMessages.length;
    }
    
    console.log(`–û—á–∏—â–µ–Ω–æ ${deletedRows} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    return deletedRows;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
}

/**
 * –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
 */
function backupData() {
  try {
    const backupSheet = ss.insertSheet(`Backup_${new Date().toISOString().split('T')[0]}`);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messagesSheet = ss.getSheetByName("Messages");
    if (messagesSheet) {
      const messagesData = messagesSheet.getDataRange().getValues();
      backupSheet.getRange(1, 1, messagesData.length, messagesData[0].length).setValues(messagesData);
    }
    
    // –ö–æ–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const usersSheet = ss.getSheetByName("Users");
    if (usersSheet) {
      const usersData = usersSheet.getDataRange().getValues();
      const startRow = backupSheet.getLastRow() + 2;
      backupSheet.getRange(startRow, 1, usersData.length, usersData[0].length).setValues(usersData);
    }
    
    backupSheet.setTabColor("YELLOW");
    console.log('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞');
    return backupSheet.getName();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
    throw error;
  }
} 