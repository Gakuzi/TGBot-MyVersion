/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π Telegram –±–æ—Ç –¥–ª—è Google –¢–∞–±–ª–∏—Ü
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
const ss = SpreadsheetApp.getActiveSpreadsheet();

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è webhook
 */
function doPost(e) {
  if (!Bot) initBot();
  try {
    if (e?.postData?.contents) {
      const contents = JSON.parse(e.postData.contents);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
      logToSheet(contents, "Debug");
      
      if (contents.message) {
        const msg = contents.message;
        const text = msg.text;
        const chat_id = msg.from.id;
        const user_name = msg.from.first_name;
        
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user_name}: ${text}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        saveMessage(msg, user_name);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text === "/start") {
          sendWelcome(chat_id, user_name);
        } else if (text === "/stats") {
          sendStats(chat_id);
        } else if (text === "/users") {
          sendUsers(chat_id);
        } else if (text === "/addme") {
          addUser(msg.from);
          Bot.sendMessage({
            chat_id: chat_id,
            text: "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
          });
        } else {
          // –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          Bot.sendMessage({
            chat_id: chat_id,
            text: `–ü—Ä–∏–≤–µ—Ç, ${user_name}! üëã\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/start - –ù–∞—á–∞—Ç—å\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/users - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n/addme - –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è`
          });
        }
      }
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞:", error);
    logToSheet({ error: error.toString(), timestamp: new Date() }, "Errors");
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
function sendWelcome(chat_id, user_name) {
  if (!Bot) initBot();
  const text = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user_name}!</b>

–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏.

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/addme - –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ —Å–ø–∏—Å–æ–∫

<b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É
‚Ä¢ –í–µ–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  `;
  
  Bot.sendMessage({
    chat_id: chat_id,
    text: text,
    parse_mode: "HTML"
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function sendStats(chat_id) {
  if (!Bot) initBot();
  try {
    const messagesSheet = ss.getSheetByName("Messages");
    const usersSheet = ss.getSheetByName("Users");
    
    let totalMessages = 0;
    let totalUsers = 0;
    
    if (messagesSheet && messagesSheet.getLastRow() > 1) {
      totalMessages = messagesSheet.getLastRow() - 1;
    }
    
    if (usersSheet && usersSheet.getLastRow() > 1) {
      totalUsers = usersSheet.getLastRow() - 1;
    }
    
    const text = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${totalMessages}
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}
  `;
    
    Bot.sendMessage({
      chat_id: chat_id,
      text: text,
      parse_mode: "HTML"
    });
  } catch (error) {
    Bot.sendMessage({
      chat_id: chat_id,
      text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    });
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function sendUsers(chat_id) {
  if (!Bot) initBot();
  try {
    const sheet = ss.getSheetByName("Users");
    
    if (!sheet || sheet.getLastRow() <= 1) {
      Bot.sendMessage({
        chat_id: chat_id,
        text: "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addme —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è."
      });
      return;
    }
    
    const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getValues();
    let text = `üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (${data.length}):</b>\n\n`;
    
    data.forEach((row, index) => {
      text += `${index + 1}. ${row[1]} (ID: ${row[0]})\n`;
    });
    
    Bot.sendMessage({
      chat_id: chat_id,
      text: text,
      parse_mode: "HTML"
    });
  } catch (error) {
    Bot.sendMessage({
      chat_id: chat_id,
      text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    });
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
 */
function saveMessage(msg, user_name) {
  try {
    let sheet = ss.getSheetByName("Messages");
    if (!sheet) {
      sheet = ss.insertSheet("Messages");
      sheet.setTabColor("BLUE");
      sheet.getRange(1, 1, 1, 4).setValues([["–î–∞—Ç–∞", "ID", "–ò–º—è", "–°–æ–æ–±—â–µ–Ω–∏–µ"]]);
    }
    
    const timestamp = new Date();
    const user_id = msg.from.id;
    const text = msg.text || "";
    
    sheet.appendRow([timestamp, user_id, user_name, text]);
  }
 catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
 */
function addUser(user) {
  try {
    let sheet = ss.getSheetByName("Users");
    if (!sheet) {
      sheet = ss.insertSheet("Users");
      sheet.setTabColor("GREEN");
      sheet.getRange(1, 1, 1, 3).setValues([["ID", "–ò–º—è", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"]]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const data = sheet.getRange("A:A").getValues();
    const userExists = data.flat().some(id => id.toString() === user.id.toString());
    
    if (!userExists) {
      const timestamp = new Date();
      sheet.appendRow([user.id, user.first_name, timestamp]);
    }
  }
 catch (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É
 */
function logToSheet(data, sheetName) {
  try {
    let sheet = ss.getSheetByName(sheetName);
    if (!sheet) {
      sheet = ss.insertSheet(sheetName);
      if (sheetName === "Debug") sheet.setTabColor("RED");
      if (sheetName === "Errors") sheet.setTabColor("ORANGE");
    }
    
    const timestamp = new Date();
    sheet.appendRow([timestamp, JSON.stringify(data)]);
  }
 catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
 */
function setupWebhook() {
  if (!Bot) initBot();
  const webAppUrl = getWebAppUrl();
  if (!webAppUrl) {
    SpreadsheetApp.getUi().alert("URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –º–µ–Ω—é.");
    return;
  }
  const result = Bot.setWebhook({
    url: webAppUrl,
    max_connections: 50
  });
  console.log("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", result);
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
 */
function checkWebhook() {
  if (!Bot) initBot();
  const info = Bot.getWebhookInfo();
  console.log("Webhook info:", info);
  return info;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ webhook
 */
function removeWebhook() {
  if (!Bot) initBot();
  const result = Bot.deleteWebhook();
  console.log("Webhook —É–¥–∞–ª–µ–Ω:", result);
  return result;
}

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
 */
function getBotInfo() {
  if (!Bot) initBot();
  const info = Bot.getMe();
  console.log("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:", info);
  return info;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
 */
function setCommands() {
  if (!Bot) initBot();
  const commands = [
    { command: "start", description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞" },
    { command: "stats", description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" },
    { command: "users", description: "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π" },
    { command: "addme", description: "–î–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è" }
  ];
  
  const result = Bot.setMyCommands({ commands });
  console.log("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:", result);
  return result;
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –±–æ—Ç–∞
 */
function resetBot() {
  if (!Bot) initBot();
  removeWebhook();
  const updates = Bot.getUpdates({});
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏—è:", updates);
  setupWebhook();
}

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã
 */
function testBot() {
  if (!Bot) initBot();
  console.log("=== –¢–ï–°–¢ –ë–û–¢–ê ===");
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
  const botInfo = getBotInfo();
  console.log("–ë–æ—Ç:", botInfo);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
  const webhookInfo = checkWebhook();
  console.log("Webhook:", webhookInfo);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  setCommands();
  
  console.log("=== –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù ===");
}