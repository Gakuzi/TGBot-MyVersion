/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
 */

/**
 * –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
 */
function testBotInitialization() {
  try {
    console.log('=== –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    const libraryTest = testLibraryConnection();
    console.log('–¢–µ—Å—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:', libraryTest);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    const initResult = initializeBot();
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initResult);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    const status = checkBotStatus();
    console.log('–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:', status);
    
    return { success: true, data: { libraryTest, initResult, status } };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function testSendMessage() {
  try {
    console.log('=== –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
    const testUserId = '123456789';
    const testMessage = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ' + new Date().toLocaleString();
    
    const result = sendTextMessage(testUserId, testMessage, 'HTML');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:', result);
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function testKeyboard() {
  try {
    console.log('=== –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===');
    
    const testUserId = '123456789';
    const testText = '–¢–µ—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞';
    const testButtons = ['–ö–Ω–æ–ø–∫–∞ 1', '–ö–Ω–æ–ø–∫–∞ 2', '–ö–Ω–æ–ø–∫–∞ 3'];
    
    const result = sendKeyboard(testUserId, testText, testButtons, 'reply');
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', result);
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
function testCalendar() {
  try {
    console.log('=== –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===');
    
    const testUserId = '123456789';
    const testText = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∞';
    
    const result = sendCalendar(testUserId, testText);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', result);
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞
 */
function testPoll() {
  try {
    console.log('=== –¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞ ===');
    
    const testUserId = '123456789';
    const testQuestion = '–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?';
    const testOptions = ['–ö—Ä–∞—Å–Ω—ã–π', '–°–∏–Ω–∏–π', '–ó–µ–ª–µ–Ω—ã–π', '–ñ–µ–ª—Ç—ã–π'];
    
    const result = sendPoll(testUserId, testQuestion, testOptions, false);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞:', result);
    
    return result;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–ø—Ä–æ—Å–∞:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç webhook —Ñ—É–Ω–∫—Ü–∏–π
 */
function testWebhookFunctions() {
  try {
    console.log('=== –¢–µ—Å—Ç webhook —Ñ—É–Ω–∫—Ü–∏–π ===');
    
    const results = {};
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
    results.webhookInfo = getWebhookInfo();
    console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:', results.webhookInfo);
    
    // –¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
    results.setWebhook = setWebhook();
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook:', results.setWebhook);
    
    return { success: true, data: results };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ webhook:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
 */
function testDataFunctions() {
  try {
    console.log('=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö ===');
    
    const results = {};
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    results.users = getUsersList();
    console.log('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', results.users);
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    results.stats = getUsageStatistics();
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', results.stats);
    
    // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    results.settings = getSettings();
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', results.settings);
    
    return { success: true, data: results };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
 */
function runFullSystemTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã...');
  
  const results = {};
  
  // –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  console.log('\n1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
  results.initialization = testBotInitialization();
  
  // –¢–µ—Å—Ç 2: –î–∞–Ω–Ω—ã–µ
  console.log('\n2. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö...');
  results.data = testDataFunctions();
  
  // –¢–µ—Å—Ç 3: Webhook
  console.log('\n3. –¢–µ—Å—Ç webhook —Ñ—É–Ω–∫—Ü–∏–π...');
  results.webhook = testWebhookFunctions();
  
  // –¢–µ—Å—Ç 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω)
  if (results.initialization.success) {
    console.log('\n4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    results.message = testSendMessage();
    
    console.log('\n5. –¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã...');
    results.keyboard = testKeyboard();
    
    console.log('\n6. –¢–µ—Å—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è...');
    results.calendar = testCalendar();
    
    console.log('\n7. –¢–µ—Å—Ç –æ–ø—Ä–æ—Å–∞...');
    results.poll = testPoll();
  }
  
  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(JSON.stringify(results, null, 2));
  
  return results;
}

/**
 * –¢–µ—Å—Ç –º–µ–Ω—é
 */
function testMenu() {
  try {
    console.log('=== –¢–µ—Å—Ç –º–µ–Ω—é ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è onOpen —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (typeof onOpen === 'function') {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è onOpen —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    } else {
      console.log('‚ùå –§—É–Ω–∫—Ü–∏—è onOpen –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
    const menuFunctions = [
      'showAdvancedTelegramUI',
      'showSettings', 
      'showStatistics',
      'clearBot'
    ];
    
    const results = {};
    menuFunctions.forEach(funcName => {
      if (typeof eval(funcName) === 'function') {
        results[funcName] = '‚úÖ –ù–∞–π–¥–µ–Ω–∞';
        console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è ${funcName} –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        results[funcName] = '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞';
        console.log(`‚ùå –§—É–Ω–∫—Ü–∏—è ${funcName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    });
    
    return { success: true, data: results };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–µ–Ω—é:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –¢–µ—Å—Ç HTML —Ñ–∞–π–ª–∞
 */
function testHtmlFile() {
  try {
    console.log('=== –¢–µ—Å—Ç HTML —Ñ–∞–π–ª–∞ ===');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ HTML —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const htmlContent = HtmlService.createHtmlOutputFromFile('Telegram_Advanced_UI.html');
    console.log('‚úÖ HTML —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    return { success: true, message: 'HTML —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ HTML:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
 */
function diagnoseSystem() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
  
  const diagnosis = {};
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  diagnosis.files = {
    'Code.gs': '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç',
    'TGbot_Config.gs': '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç', 
    'Telegram_Advanced_UI.html': '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç'
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
  diagnosis.functions = {
    'onOpen': typeof onOpen === 'function' ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞',
    'initializeBot': typeof initializeBot === 'function' ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞',
    'sendTextMessage': typeof sendTextMessage === 'function' ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞',
    'testLibraryConnection': typeof testLibraryConnection === 'function' ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
  try {
    if (typeof TGbot !== 'undefined') {
      diagnosis.library = '‚úÖ TGbot –¥–æ—Å—Ç—É–ø–µ–Ω';
    } else {
      diagnosis.library = '‚ùå TGbot –Ω–µ –Ω–∞–π–¥–µ–Ω';
    }
  } catch (error) {
    diagnosis.library = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ TGbot: ' + error.message;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  try {
    const settings = getSettings();
    diagnosis.settings = settings.BOT_TOKEN ? '‚úÖ –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
  } catch (error) {
    diagnosis.settings = '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ' + error.message;
  }
  
  console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
  console.log(JSON.stringify(diagnosis, null, 2));
  
  return diagnosis;
} 