const ss = SpreadsheetApp.getActiveSpreadsheet();
var Bot = null;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('ü§ñ Telegram Bot')
    .addItem('üöÄ –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSetupWizard')
    .addItem('‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhook', 'showWebhookManager')
    .addSeparator()
    .addItem('üß™ –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ', 'showTelegramTestUI')
    .addToUi();
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç HTML-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ú–∞—Å—Ç–µ—Ä–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.
 */
function showSetupWizard() {
  const html = HtmlService.createTemplateFromFile('SetupWizard');
  html.start_at = 'wizard'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
  SpreadsheetApp.getUi().showModalDialog(html.evaluate().setWidth(600).setHeight(550), 'üöÄ –ú–∞—Å—Ç–µ—Ä –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä Webhook (—á–∞—Å—Ç—å –ú–∞—Å—Ç–µ—Ä–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏).
 */
function showWebhookManager() {
  const html = HtmlService.createTemplateFromFile('SetupWizard');
  html.start_at = 'webhook'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å —à–∞–≥–∞ Webhook
  SpreadsheetApp.getUi().showModalDialog(html.evaluate().setWidth(600).setHeight(550), '‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Webhook');
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
 */
function showTelegramTestUI() {
  const html = HtmlService.createHtmlOutputFromFile('telegram_test_ui.html')
    .setWidth(1200)
    .setHeight(800);
  SpreadsheetApp.getUi().showModalDialog(html, 'Telegram Bot Test UI');
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ú–∞—Å—Ç–µ—Ä–∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.
 */
function setupInitialSheets() {
  const sheets = {
    'Messages': ['–î–∞—Ç–∞', 'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–°–æ–æ–±—â–µ–Ω–∏–µ'],
    'Users': ['ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'],
    'Debug': ['–î–∞—Ç–∞', '–î–∞–Ω–Ω—ã–µ'],
    'Errors': ['–î–∞—Ç–∞', '–û—à–∏–±–∫–∞']
  };

  for (const sheetName in sheets) {
    if (!ss.getSheetByName(sheetName)) {
      const newSheet = ss.insertSheet(sheetName);
      newSheet.getRange(1, 1, 1, sheets[sheetName].length).setValues([sheets[sheetName]]);
      newSheet.setFrozenRows(1);
    }
  }
  return '–õ–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã!';
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞.
 */
function saveSettings(settings) {
  PropertiesService.getScriptProperties().setProperties(settings, true); // true - —É–¥–∞–ª–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  return getSettings();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–∫—Ä–∏–ø—Ç–∞.
 */
function getSettings() {
  return PropertiesService.getScriptProperties().getProperties();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.
 */
function initBot() {
  if (Bot) return; // –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  const token = PropertiesService.getScriptProperties().getProperty('BOT_TOKEN');
  const webAppUrl = ScriptApp.getService().getUrl(); // –ü–æ–ª—É—á–∞–µ–º URL —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ú–∞—Å—Ç–µ—Ä –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω.');
  }

  if (!webAppUrl) {
    throw new Error('URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');
  }

  try {
    Bot = TGbot.bot({ botToken: token, webAppUrl: webAppUrl });
    if (!Bot) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TGbot.');
    }
  } catch (e) {
    throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: ${e.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ TGbot –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`);
  }
}

function runTest(testName, options) {
  initBot();
  if (!Bot) {
    throw new Error('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
  }

  try {
    switch (testName) {
      case 'getMe':
        return Bot.getMe();
      case 'getInfo':
        return Bot.info();
      case 'sendMessage':
        return Bot.sendMessage(options);
      case 'sendMedia':
        const mediaOptions = {
            chat_id: options.chat_id,
            caption: options.caption
        };
        mediaOptions[options.mediaType] = options.url;
        return Bot[`send${options.mediaType.charAt(0).toUpperCase() + options.mediaType.slice(1)}`](mediaOptions);
      case 'sendKeyboard':
        const Keyboard = TGbot.keyboard();
        const Key = TGbot.key();
        const buttonRows = options.buttonsText.split('\n').filter(row => row.trim());
        const keyboardButtons = buttonRows.map(row => {
            const parts = row.split('|');
            return [Key.callback(parts[0].trim(), parts[1].trim())];
        });
        const keyboard = Keyboard.make(keyboardButtons).inline();
        return Bot.sendMessage({ chat_id: options.chat_id, text: options.text, reply_markup: keyboard });
      case 'sendPoll':
        const pollOptions = {
            chat_id: options.chat_id,
            question: options.question,
            options: options.optionsText.split('\n').filter(opt => opt.trim())
        };
        return Bot.sendPoll(pollOptions);
      case 'setWebhook':
        const url = ScriptApp.getService().getUrl();
        return Bot.setWebhook({ url: url });
      case 'getWebhookInfo':
        return Bot.getWebhookInfo();
      case 'deleteWebhook':
        return Bot.deleteWebhook();
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç: ' + testName);
    }
  } catch (e) {
    return { error: true, message: e.message, stack: e.stack };
  }
}