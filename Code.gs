/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram Bot
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π TGbot
 */

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const ss = SpreadsheetApp.getActiveSpreadsheet();
let Bot = null;
let TGbot = null;

// –®–∞–±–ª–æ–Ω—ã –ª–∏—Å—Ç–æ–≤
const SHEET_TEMPLATES = {
  'Messages': ['–î–∞—Ç–∞', 'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–°–æ–æ–±—â–µ–Ω–∏–µ', '–¢–∏–ø', 'Message ID'],
  'Users': ['ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–∏–∫', '–Ø–∑—ã–∫', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'],
  'Debug': ['–î–∞—Ç–∞', '–î–∞–Ω–Ω—ã–µ', '–¢–∏–ø'],
  'Errors': ['–î–∞—Ç–∞', '–û—à–∏–±–∫–∞', '–§—É–Ω–∫—Ü–∏—è', '–î–∞–Ω–Ω—ã–µ'],
  'BotLog': ['–î–∞—Ç–∞', '–î–µ–π—Å—Ç–≤–∏–µ', '–î–∞–Ω–Ω—ã–µ', '–°—Ç–∞—Ç—É—Å', '–û—à–∏–±–∫–∞']
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('ü§ñ Telegram Bot')
    .addItem('üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å', 'showAdvancedTelegramUI')
    .addSeparator()
    .addItem('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'showSettings')
    .addItem('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'showStatistics')
    .addItem('üîÑ –û—á–∏—Å—Ç–∏—Ç—å –±–æ—Ç–∞', 'clearBot')
    .addToUi();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ Properties
 */
function initializeBot() {
  try {
    const properties = PropertiesService.getScriptProperties();
    const botToken = properties.getProperty('BOT_TOKEN');
    const webAppUrl = properties.getProperty('WEBAPP_URL');
    
    if (!botToken) {
      throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TGbot
    Bot = TGbot.bot({ 
      botToken: botToken, 
      webAppUrl: webAppUrl || null,
      logRequest: true,
      parseMode: "HTML"
    });
    
    console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error.message);
    logError('initializeBot', error.message, { botToken: '***' });
    return false;
  }
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */
function showAdvancedTelegramUI() {
  const html = HtmlService.createHtmlOutputFromFile('Telegram_Advanced_UI.html')
    .setWidth(1400)
    .setHeight(900);
  SpreadsheetApp.getUi().showModalDialog(html, '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å Telegram Bot');
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function showSettings() {
  const html = HtmlService.createHtmlOutputFromFile('Telegram_Advanced_UI.html')
    .setWidth(800)
    .setHeight(600);
  SpreadsheetApp.getUi().showModalDialog(html, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot');
}

/**
 * –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function showStatistics() {
  try {
    const stats = getUsageStatistics();
    const ui = SpreadsheetApp.getUi();
    
    let message = 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n\n';
    if (stats.success) {
      message += `–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${stats.data.totalActions}\n`;
      message += `–£—Å–ø–µ—à–Ω—ã—Ö: ${stats.data.successfulActions}\n`;
      message += `–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${stats.data.successRate}%\n`;
    } else {
      message += `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${stats.error}`;
    }
    
    ui.alert('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', message, ui.ButtonSet.OK);
  } catch (error) {
    const ui = SpreadsheetApp.getUi();
    ui.alert('–û—à–∏–±–∫–∞', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`, ui.ButtonSet.OK);
  }
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–≤–∏—Å–∞–Ω–∏–∏
 */
function clearBot() {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const properties = PropertiesService.getScriptProperties();
    const webAppUrl = properties.getProperty('WEBAPP_URL');
    
    let results = {};
    
    try {
      results.deleteResult = Bot.deleteWebhook();
    } catch (error) {
      results.deleteError = error.message;
    }
    
    try {
      results.updatesResult = Bot.getUpdates({});
    } catch (error) {
      results.updatesError = error.message;
    }
    
    if (webAppUrl) {
      try {
        results.setResult = Bot.setWebhook({
          url: webAppUrl,
          max_connections: 50,
          allowed_updates: ["message", "callback_query"],
          drop_pending_updates: false
        });
      } catch (error) {
        results.setError = error.message;
      }
    }
    
    logBotAction('clearBot', results, true);
    
    SpreadsheetApp.getUi().alert(
      '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      '–ë–æ—Ç –æ—á–∏—â–µ–Ω –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  } catch (error) {
    logError('clearBot', error.message);
    SpreadsheetApp.getUi().alert(
      '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏',
      `–û—à–∏–±–∫–∞: ${error.message}`,
      SpreadsheetApp.getUi().ButtonSet.OK
    );
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–û–ë–©–ï–ù–ò–ô =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendTextMessage(chatId, text, parseMode = 'HTML', disablePreview = false) {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendMessage({
      chat_id: chatId,
      text: text,
      parse_mode: parseMode,
      disable_web_page_preview: disablePreview
    });
    
    logBotAction('sendTextMessage', { chatId, text, parseMode }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendTextMessage', { chatId, text, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function editMessage(chatId, messageId, text, parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.editMessageText({
      chat_id: chatId,
      message_id: messageId,
      text: text,
      parse_mode: parseMode
    });
    
    logBotAction('editMessage', { chatId, messageId, text }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('editMessage', { chatId, messageId, text, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function deleteMessage(chatId, messageId) {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.deleteMessage({
      chat_id: chatId,
      message_id: messageId
    });
    
    logBotAction('deleteMessage', { chatId, messageId }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('deleteMessage', { chatId, messageId, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–î–ò–ê =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
 */
function sendPhoto(chatId, photoBlob, caption = '', parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendPhoto({
      chat_id: chatId,
      photo: photoBlob,
      caption: caption,
      parse_mode: parseMode,
      contentType: "multipart/form-data"
    });
    
    logBotAction('sendPhoto', { chatId, caption }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendPhoto', { chatId, caption, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
 */
function sendVideo(chatId, videoBlob, caption = '', parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendVideo({
      chat_id: chatId,
      video: videoBlob,
      caption: caption,
      parse_mode: parseMode,
      contentType: "multipart/form-data"
    });
    
    logBotAction('sendVideo', { chatId, caption }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendVideo', { chatId, caption, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
 */
function sendDocument(chatId, documentBlob, caption = '', parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendDocument({
      chat_id: chatId,
      document: documentBlob,
      caption: caption,
      parse_mode: parseMode,
      contentType: "multipart/form-data"
    });
    
    logBotAction('sendDocument', { chatId, caption }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendDocument', { chatId, caption, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
 */
function sendAudio(chatId, audioBlob, caption = '', parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendAudio({
      chat_id: chatId,
      audio: audioBlob,
      caption: caption,
      parse_mode: parseMode,
      contentType: "multipart/form-data"
    });
    
    logBotAction('sendAudio', { chatId, caption }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendAudio', { chatId, caption, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendVoice(chatId, voiceBlob, caption = '') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendVoice({
      chat_id: chatId,
      voice: voiceBlob,
      caption: caption,
      contentType: "multipart/form-data"
    });
    
    logBotAction('sendVoice', { chatId, caption }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendVoice', { chatId, caption, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† =====

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function sendKeyboard(chatId, text, buttons, keyboardType = 'reply', parseMode = 'HTML') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const Keyboard = TGbot.keyboard();
    let replyMarkup;
    
    if (keyboardType === 'reply') {
      replyMarkup = Keyboard.make(buttons, { columns: 2 }).reply();
    } else if (keyboardType === 'inline') {
      replyMarkup = Keyboard.make(buttons, { columns: 2 }).inline();
    } else if (keyboardType === 'remove') {
      replyMarkup = Keyboard.remove();
    }
    
    const response = Bot.sendMessage({
      chat_id: chatId,
      text: text,
      parse_mode: parseMode,
      reply_markup: replyMarkup
    });
    
    logBotAction('sendKeyboard', { chatId, text, keyboardType }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendKeyboard', { chatId, text, keyboardType, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
 */
function sendCalendar(chatId, text = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.sendMessage({
      chat_id: chatId,
      text: text,
      reply_markup: TGbot.calendar({})
    });
    
    logBotAction('sendCalendar', { chatId, text }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendCalendar', { chatId, text, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ü–†–û–°–û–í =====

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
 */
function sendPoll(chatId, question, options, isQuiz = false, correctOption = null, explanation = '') {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const pollData = {
      chat_id: chatId,
      question: question,
      options: options
    };
    
    if (isQuiz) {
      pollData.type = "quiz";
      pollData.is_anonymous = false;
      if (correctOption !== null) {
        pollData.correct_option_id = correctOption;
      }
      if (explanation) {
        pollData.explanation = explanation;
      }
    }
    
    const response = Bot.sendPoll(pollData);
    
    logBotAction('sendPoll', { chatId, question, isQuiz }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('sendPoll', { chatId, question, isQuiz, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ä–æ—Å–∞
 */
function stopPoll(chatId, messageId) {
  try {
    if (!Bot) {
      if (!initializeBot()) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞');
      }
    }
    
    const response = Bot.stopPoll({
      chat_id: chatId,
      message_id: messageId
    });
    
    logBotAction('stopPoll', { chatId, messageId }, true);
    return { success: true, data: response };
  } catch (error) {
    logBotAction('stopPoll', { chatId, messageId, error: error.message }, false);
    return { success: false, error: error.message };
  }
}

// ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ê–¢–û–ú =====

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserChatHistory(userId, limit = 50) {
  try {
    const messagesSheet = ss.getSheetByName('Messages');
    
    if (!messagesSheet) {
      return { success: false, error: '–õ–∏—Å—Ç Messages –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    const data = messagesSheet.getDataRange().getValues();
    if (data.length < 2) {
      return { success: true, data: [] };
    }
    
    const headers = data[0];
    const idIndex = headers.indexOf('ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const messageIndex = headers.indexOf('–°–æ–æ–±—â–µ–Ω–∏–µ');
    const dateIndex = headers.indexOf('–î–∞—Ç–∞');
    
    if (idIndex === -1 || messageIndex === -1) {
      return { success: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ Messages' };
    }
    
    const userMessages = data.slice(1)
      .filter(row => row[idIndex] == userId)
      .map(row => ({
        date: row[dateIndex] || new Date(),
        message: row[messageIndex] || '',
        userId: row[idIndex]
      }))
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(0, limit);
    
    return { success: true, data: userMessages };
  } catch (error) {
    logError('getUserChatHistory', error.message, { userId });
    return { success: false, error: error.message };
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É
 */
function saveMessageToSheet(messageData) {
  try {
    const messagesSheet = ss.getSheetByName('Messages') || ss.insertSheet('Messages');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (messagesSheet.getLastRow() === 0) {
      messagesSheet.getRange(1, 1, 1, 6).setValues([['–î–∞—Ç–∞', 'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–°–æ–æ–±—â–µ–Ω–∏–µ', '–¢–∏–ø', 'Message ID']]);
    }
    
    messagesSheet.appendRow([
      new Date(),
      messageData.userId,
      messageData.userName || '',
      messageData.message || '',
      messageData.type || 'text',
      messageData.messageId || ''
    ]);
    
    return { success: true };
  } catch (error) {
    logError('saveMessageToSheet', error.message, messageData);
    return { success: false, error: error.message };
  }
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞
 */
function checkBotStatus() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å TGbot
    if (typeof TGbot === 'undefined') {
      return { success: false, error: '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ TGbot –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' };
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    if (typeof TGbot.bot !== 'function') {
      return { success: false, error: '–§—É–Ω–∫—Ü–∏—è TGbot.bot –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞' };
    }
    
    if (!Bot) {
      const initResult = initializeBot();
      if (!initResult) {
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞' };
      }
    }
    
    try {
      const botInfo = Bot.getMe();
      if (!botInfo || !botInfo.result) {
        return { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ' };
      }
      
      return { 
        success: true, 
        data: {
          botName: botInfo.result.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          botUsername: botInfo.result.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          libraryVersion: '89',
          webhookInfo: Bot.getWebhookInfo()
        }
      };
    } catch (botError) {
      return { success: false, error: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: ${botError.message}` };
    }
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
function getUsageStatistics() {
  try {
    const logSheet = ss.getSheetByName('BotLog');
    
    if (!logSheet || logSheet.getLastRow() === 0) {
      return { success: true, data: { totalActions: 0, successRate: 0, recentActions: [] } };
    }
    
    const data = logSheet.getDataRange().getValues();
    const headers = data[0];
    const actionIndex = headers.indexOf('–î–µ–π—Å—Ç–≤–∏–µ');
    const statusIndex = headers.indexOf('–°—Ç–∞—Ç—É—Å');
    const dateIndex = headers.indexOf('–î–∞—Ç–∞');
    
    if (actionIndex === -1 || statusIndex === -1 || dateIndex === -1) {
      return { success: false, error: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—Å—Ç–∞ BotLog' };
    }
    
    const actions = data.slice(1);
    const totalActions = actions.length;
    const successfulActions = actions.filter(row => row[statusIndex] === '–£—Å–ø–µ—à–Ω–æ').length;
    const successRate = totalActions > 0 ? (successfulActions / totalActions * 100).toFixed(1) : 0;
    
    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
    const recentActions = actions
      .slice(-10)
      .reverse()
      .map(row => ({
        date: row[dateIndex],
        action: row[actionIndex],
        status: row[statusIndex]
      }));
    
    return {
      success: true,
      data: {
        totalActions,
        successfulActions,
        successRate,
        recentActions
      }
    };
  } catch (error) {
    return { success: false, error: error.message };
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞
 */
function logBotAction(action, data = null, success = true) {
  try {
    const logSheet = ss.getSheetByName('BotLog') || ss.insertSheet('BotLog');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (logSheet.getLastRow() === 0) {
      logSheet.getRange(1, 1, 1, 5).setValues([['–î–∞—Ç–∞', '–î–µ–π—Å—Ç–≤–∏–µ', '–î–∞–Ω–Ω—ã–µ', '–°—Ç–∞—Ç—É—Å', '–û—à–∏–±–∫–∞']]);
    }
    
    const timestamp = new Date();
    const status = success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞';
    const error = success ? '' : (data?.message || data);
    
    logSheet.appendRow([timestamp, action, JSON.stringify(data), status, error]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 */
function logError(functionName, errorMessage, data = null) {
  try {
    const errorSheet = ss.getSheetByName('Errors') || ss.insertSheet('Errors');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (errorSheet.getLastRow() === 0) {
      errorSheet.getRange(1, 1, 1, 4).setValues([['–î–∞—Ç–∞', '–û—à–∏–±–∫–∞', '–§—É–Ω–∫—Ü–∏—è', '–î–∞–Ω–Ω—ã–µ']]);
    }
    
    errorSheet.appendRow([new Date(), errorMessage, functionName, JSON.stringify(data)]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏:', error.message);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
function getUsersList() {
  try {
    const usersSheet = ss.getSheetByName('Users');
    if (!usersSheet) {
      return [];
    }
    
    const data = usersSheet.getDataRange().getValues();
    if (data.length < 2) {
      return [];
    }
    
    const headers = data[0];
    const idIndex = headers.indexOf('ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    const nameIndex = headers.indexOf('–ò–º—è');
    const lastNameIndex = headers.indexOf('–§–∞–º–∏–ª–∏—è');
    const nickIndex = headers.indexOf('–ù–∏–∫');
    
    if (idIndex === -1 || nameIndex === -1) {
      return [];
    }
    
    const users = data.slice(1).map(row => {
      const id = row[idIndex];
      if (!id) return null;
      
      const firstName = row[nameIndex] || '';
      const lastName = row[lastNameIndex] || '';
      const nick = row[nickIndex] ? `(@${row[nickIndex]})` : '';
      const name = [firstName, lastName, nick].filter(Boolean).join(' ').trim();
      
      return { id: id, name: name || id };
    }).filter(Boolean);
    
    return users;
  } catch (error) {
    logError('getUsersList', error.message);
    return [];
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function saveSettings(settings) {
  try {
    const properties = PropertiesService.getScriptProperties();
    
    if (settings.BOT_TOKEN) {
      properties.setProperty('BOT_TOKEN', settings.BOT_TOKEN);
    }
    
    if (settings.WEBAPP_URL) {
      properties.setProperty('WEBAPP_URL', settings.WEBAPP_URL);
    }
    
    logBotAction('saveSettings', { BOT_TOKEN: '***', WEBAPP_URL: settings.WEBAPP_URL }, true);
    return { success: true, data: { BOT_TOKEN: settings.BOT_TOKEN, WEBAPP_URL: settings.WEBAPP_URL } };
  } catch (error) {
    logError('saveSettings', error.message, settings);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function getSettings() {
  try {
    const properties = PropertiesService.getScriptProperties();
    return {
      BOT_TOKEN: properties.getProperty('BOT_TOKEN') || '',
      WEBAPP_URL: properties.getProperty('WEBAPP_URL') || ''
    };
  } catch (error) {
    logError('getSettings', error.message);
    return { BOT_TOKEN: '', WEBAPP_URL: '' };
  }
}

/**
 * Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
 */
function doPost(e) {
  try {
    if (e?.postData?.contents) {
      const contents = JSON.parse(e.postData.contents);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      const debugSheet = ss.getSheetByName('Debug') || ss.insertSheet('Debug');
      if (debugSheet.getLastRow() === 0) {
        debugSheet.getRange(1, 1, 1, 3).setValues([['–î–∞—Ç–∞', '–î–∞–Ω–Ω—ã–µ', '–¢–∏–ø']]);
      }
      debugSheet.appendRow([new Date(), JSON.stringify(contents), 'webhook']);
      
      if (contents.message) {
        const msg = contents.message;
        const text = msg.text;
        const chatId = msg.from.id;
        const userName = msg.from.first_name || '';
        const lastName = msg.from.last_name || '';
        const nick = msg.from.username || '';
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        saveMessageToSheet({
          userId: chatId,
          userName: [userName, lastName, nick].filter(Boolean).join(' '),
          message: text,
          type: 'incoming',
          messageId: msg.message_id
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        addUserToSheet({
          id: chatId,
          firstName: userName,
          lastName: lastName,
          username: nick
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (text && text.startsWith('/')) {
          handleCommand(msg);
        }
      }
    }
  } catch (error) {
    logError('doPost', error.message, { contents: e?.postData?.contents });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
 */
function handleCommand(msg) {
  const text = msg.text;
  const chatId = msg.from.id;
  
  switch (text) {
    case '/start':
      sendTextMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.');
      break;
    case '/help':
      sendTextMessage(chatId, '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/help - –ü–æ–º–æ—â—å\n/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
      break;
    case '/stats':
      const stats = getUsageStatistics();
      if (stats.success) {
        sendTextMessage(chatId, `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: ${stats.data.totalActions}\n–£—Å–ø–µ—à–Ω—ã—Ö: ${stats.data.successfulActions}\n–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${stats.data.successRate}%`);
      }
      break;
    default:
      sendTextMessage(chatId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${text}`);
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É
 */
function addUserToSheet(userData) {
  try {
    const usersSheet = ss.getSheetByName('Users') || ss.insertSheet('Users');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π
    if (usersSheet.getLastRow() === 0) {
      usersSheet.getRange(1, 1, 1, 7).setValues([['ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–∏–∫', '–Ø–∑—ã–∫', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', '–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']]);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const data = usersSheet.getDataRange().getValues();
    const headers = data[0];
    const idIndex = headers.indexOf('ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
    if (idIndex !== -1) {
      const existingRow = data.slice(1).findIndex(row => row[idIndex] == userData.id);
      
      if (existingRow === -1) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        usersSheet.appendRow([
          userData.id,
          userData.firstName || '',
          userData.lastName || '',
          userData.username || '',
          'ru',
          new Date(),
          new Date()
        ]);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const rowIndex = existingRow + 2;
        usersSheet.getRange(rowIndex, 7).setValue(new Date());
      }
    }
  } catch (error) {
    logError('addUserToSheet', error.message, userData);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook
 */
function getWebhookInfo() {
  if (!Bot) {
    if (!initializeBot()) {
      return null;
    }
  }
  
  try {
    return Bot.getWebhookInfo();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook:', error.message);
    return null;
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ webhook
 */
function deleteWebhook() {
  if (!Bot) {
    if (!initializeBot()) {
      return null;
    }
  }
  
  try {
    return Bot.deleteWebhook();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error.message);
    return null;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 */
function getUpdates() {
  if (!Bot) {
    if (!initializeBot()) {
      return null;
    }
  }
  
  try {
    return Bot.getUpdates({});
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
    return null;
  }
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
 */
function setWebhook() {
  if (!Bot) {
    if (!initializeBot()) {
      return null;
    }
  }
  
  try {
    const properties = PropertiesService.getScriptProperties();
    const webAppUrl = properties.getProperty('WEBAPP_URL');
    
    if (!webAppUrl) {
      throw new Error('URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    return Bot.setWebhook({
      url: webAppUrl,
      max_connections: 50,
      allowed_updates: ["message", "callback_query"],
      drop_pending_updates: false
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error.message);
    return null;
  }
}
