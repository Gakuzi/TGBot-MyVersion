const ss = SpreadsheetApp.getActiveSpreadsheet();
var Bot = null;

const SHEET_TEMPLATES = {
  'Messages': ['–î–∞—Ç–∞', 'ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–°–æ–æ–±—â–µ–Ω–∏–µ'],
  'Users': ['ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–ò–º—è', '–§–∞–º–∏–ª–∏—è', '–ù–∏–∫', '–Ø–∑—ã–∫', '–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è'],
  'Debug': ['–î–∞—Ç–∞', '–î–∞–Ω–Ω—ã–µ'],
  'Errors': ['–î–∞—Ç–∞', '–û—à–∏–±–∫–∞']
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.
 */
function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('ü§ñ Telegram Bot')
    .addItem('‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'showTelegramTestUI')
    .addToUi();
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç UI –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 */
function showTelegramTestUI() {
  const html = HtmlService.createHtmlOutputFromFile('telegram_test_ui.html')
    .setWidth(1200)
    .setHeight(800);
  SpreadsheetApp.getUi().showModalDialog(html, '–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram –ë–æ—Ç–æ–º');
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–õ–∏—Å—Ç—ã) ---

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ (—à–∞–±–ª–æ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö).
 */
function getSheetsStatus() {
  const allSheets = ss.getSheets().map(s => s.getName());
  const templateSheetNames = Object.keys(SHEET_TEMPLATES);
  
  let statuses = templateSheetNames.map(name => ({
    name: name,
    exists: allSheets.includes(name),
    isTemplate: true
  }));

  allSheets.forEach(name => {
    if (!templateSheetNames.includes(name)) {
      statuses.push({ name: name, exists: true, isTemplate: false });
    }
  });

  return statuses;
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—Å—Ç–∞–º–∏.
 */
function manageSheets(options) {
  try {
    switch (options.action) {
      case 'createAllSheets':
        return createAllSheets();
      case 'createSheet':
        return createSheet(options.sheetName);
      case 'clearSheet':
        return clearSheet(options.sheetName);
      case 'deleteSheet':
        return deleteSheet(options.sheetName);
      case 'deleteNonTemplateSheets':
        return deleteNonTemplateSheets();
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.');
    }
  } catch (e) {
    // –õ–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    const errorSheet = ss.getSheetByName('Errors') || ss.insertSheet('Errors');
    errorSheet.appendRow([new Date(), `manageSheets Error: ${e.message}`]);
    throw new Error(e.message); // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤ UI
  }
}

function createSheet(sheetName) {
  if (!ss.getSheetByName(sheetName)) {
    const headers = SHEET_TEMPLATES[sheetName];
    if (!headers) throw new Error(`–®–∞–±–ª–æ–Ω –¥–ª—è –ª–∏—Å—Ç–∞ "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    const newSheet = ss.insertSheet(sheetName);
    newSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    newSheet.setFrozenRows(1);
    return `‚úÖ –õ–∏—Å—Ç "${sheetName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`;
  }
  return `‚ÑπÔ∏è –õ–∏—Å—Ç "${sheetName}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`;
}

function createAllSheets() {
  const templateSheetNames = Object.keys(SHEET_TEMPLATES);
  let createdCount = 0;
  templateSheetNames.forEach(name => {
    if (!ss.getSheetByName(name)) {
      createSheet(name);
      createdCount++;
    }
  });
  return createdCount > 0 ? `‚úÖ –°–æ–∑–¥–∞–Ω–æ ${createdCount} –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤.` : '‚ÑπÔ∏è –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ª–∏—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.';
}

function clearSheet(sheetName) {
  const sheet = ss.getSheetByName(sheetName);
  if (sheet) {
    sheet.getDataRange().offset(1, 0).clearContent(); // –û—á–∏—â–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    return `‚úÖ –õ–∏—Å—Ç "${sheetName}" –æ—á–∏—â–µ–Ω.`;
  }
  throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
}

function deleteSheet(sheetName) {
  const sheet = ss.getSheetByName(sheetName);
  if (sheet) {
    ss.deleteSheet(sheet);
    return `‚úÖ –õ–∏—Å—Ç "${sheetName}" —É–¥–∞–ª–µ–Ω.`;
  }
  throw new Error(`–õ–∏—Å—Ç "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
}

function deleteNonTemplateSheets() {
  const allSheetNames = ss.getSheets().map(s => s.getName());
  const templateSheetNames = Object.keys(SHEET_TEMPLATES);
  let deletedCount = 0;
  allSheetNames.forEach(name => {
    if (!templateSheetNames.includes(name)) {
      deleteSheet(name);
      deletedCount++;
    }
  });
  return deletedCount > 0 ? `‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deletedCount} —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–∏—Å—Ç–æ–≤.` : '‚ÑπÔ∏è –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
}


// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ —Ç–µ—Å—Ç–æ–≤ ---

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ —Å–≤–æ–π—Å—Ç–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞.
 */
function saveSettings(settings) {
  PropertiesService.getScriptProperties().setProperties({
      BOT_TOKEN: settings.BOT_TOKEN || '',
      DEPLOYMENT_ID: settings.DEPLOYMENT_ID || ''
  }, false); // false - –Ω–µ —É–¥–∞–ª—è—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  return getSettings();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å–≤–æ–π—Å—Ç–≤ —Å–∫—Ä–∏–ø—Ç–∞.
 */
function getSettings() {
  return PropertiesService.getScriptProperties().getProperties();
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.
 */
function initBot() {
  if (Bot) return; // –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  const scriptProperties = PropertiesService.getScriptProperties();
  const token = scriptProperties.getProperty('BOT_TOKEN');
  const deploymentId = scriptProperties.getProperty('DEPLOYMENT_ID');

  if (!token) {
    throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" -> "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω.');
  }

  if (!deploymentId) {
    throw new Error('ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è" -> "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ ID.');
  }

  const webAppUrl = `https://script.google.com/macros/s/${deploymentId}/exec`;

  try {
    Bot = TGbot.bot({ botToken: token, webAppUrl: webAppUrl });
    if (!Bot) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ TGbot.');
    }
  } catch (e) {
    throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: ${e.message}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ TGbot –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.`);
  }
}

function runTest(testName, options) {
  try {
    initBot(); // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ
    if (!Bot) {
      throw new Error('–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
    }

    switch (testName) {
      case 'getMe':
        return Bot.getMe();
      case 'sendMessage':
        return Bot.sendMessage(options);
      case 'sendMedia':
        const mediaOptions = {
            chat_id: options.chat_id,
            caption: options.caption
        };
        mediaOptions[options.mediaType] = options.url;
        return Bot[`send${options.mediaType.charAt(0).toUpperCase() + options.mediaType.slice(1)}`](mediaOptions);
      case 'sendKeyboard':
        const Keyboard = TGbot.keyboard();
        const Key = TGbot.key();
        const buttonRows = options.buttonsText.split('\n').filter(row => row.trim());
        const keyboardButtons = buttonRows.map(row => {
            const parts = row.split('|');
            return [Key.callback(parts[0].trim(), parts[1].trim())];
        });
        const keyboard = Keyboard.make(keyboardButtons).inline();
        return Bot.sendMessage({ chat_id: options.chat_id, text: options.text, reply_markup: keyboard });
      case 'sendPoll':
        const pollOptions = {
            chat_id: options.chat_id,
            question: options.question,
            options: options.optionsText.split('\n').filter(opt => opt.trim())
        };
        return Bot.sendPoll(pollOptions);
      case 'setWebhook':
        const deploymentId = PropertiesService.getScriptProperties().getProperty('DEPLOYMENT_ID');
        if (!deploymentId) throw new Error("ID —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
        const url = `https://script.google.com/macros/s/${deploymentId}/exec`;
        return Bot.setWebhook({ url: url });
      case 'getWebhookInfo':
        return Bot.getWebhookInfo();
      case 'deleteWebhook':
        return Bot.deleteWebhook();
      default:
        throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç: ' + testName);
    }
  } catch (e) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ª–∏—Å—Ç 'Errors'
    const sheet = ss.getSheetByName('Errors') || ss.insertSheet('Errors');
    sheet.appendRow([new Date(), `–§—É–Ω–∫—Ü–∏—è: ${testName}, –û—à–∏–±–∫–∞: ${e.message}`, JSON.stringify(e, null, 2)]);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –≤ UI
    return { error: true, message: e.message, stack: e.stack };
  }
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ ---

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram.
 */
function doPost(e) {
  const debugSheet = ss.getSheetByName('Debug');
  try {
    if (debugSheet) {
      debugSheet.appendRow([new Date(), JSON.stringify(e.postData.contents)]);
    }

    const update = JSON.parse(e.postData.contents);
    const message = update.message || update.callback_query.message;
    const user = update.message ? update.message.from : update.callback_query.from;

    recordUser(user);

    if (message) {
      const messagesSheet = ss.getSheetByName('Messages');
      if (messagesSheet) {
        messagesSheet.appendRow([
          new Date(),
          user.id,
          user.first_name,
          message.text || ' (–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)'
        ]);
      }
    }

  } catch (err) {
    const errorSheet = ss.getSheetByName('Errors');
    if (errorSheet) {
      errorSheet.appendRow([new Date(), `doPost Error: ${err.message}`, err.stack]);
    }
  }
}

/**
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
 */
function recordUser(user) {
  try {
    const usersSheet = ss.getSheetByName('Users');
    if (!usersSheet) return;

    const data = usersSheet.getDataRange().getValues();
    const userRow = data.find(row => row[0] == user.id);

    const userData = [
      user.id,
      user.first_name || '',
      user.last_name || '',
      user.username || '',
      user.language_code || '',
      new Date()
    ];

    if (userRow) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
      const rowIndex = data.findIndex(row => row[0] == user.id) + 1;
      usersSheet.getRange(rowIndex, 1, 1, userData.length).setValues([userData]);
    } else {
      // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
      usersSheet.appendRow(userData);
    }
  } catch (err) {
    const errorSheet = ss.getSheetByName('Errors');
    if (errorSheet) {
      errorSheet.appendRow([new Date(), `recordUser Error: ${err.message}`, err.stack]);
    }
  }
}